@Component
@Order(Ordered.HIGHEST_PRECEDENCE) // Ensure it runs early
public class MdcCaptureTestFilter extends OncePerRequestFilter {

    public static final Map<String, String> MDC_VALUES = new ConcurrentHashMap<>();

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        try {
            filterChain.doFilter(request, response);
        } finally {
            MDC_VALUES.put("CONVERSATION", MDC.get("CONVERSATION_ID"));
            MDC_VALUES.put("REFERENCE", MDC.get("DECLARATION_ID"));
        }
    }
}


@WebMvcTest(LicenceUpdateController.class)
@Import(MdcCaptureTestFilter.class) // Only includes it in tests
class LicenceUpdateControllerTest {
    ...
}

mockMvc.perform(put(URL_TEMPLATE)
        .contentType(MediaType.APPLICATION_JSON)
        .headers(headers)
        .content(licenseJson))
    .andExpect(status().isOk());

assertThat(MdcCaptureTestFilter.MDC_VALUES.get("CONVERSATION")).isEqualTo("CONVERSATION");
assertThat(MdcCaptureTestFilter.MDC_VALUES.get("REFERENCE")).isEqualTo("REFERENCE");