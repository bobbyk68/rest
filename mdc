MDC and Thread Local Storage: The Mapped Diagnostic Context (MDC) relies on thread-local storage. This means that any information you put into the MDC is associated with the specific thread in which it was set. When operations are executed in a different thread (e.g., using ExecutorService, asynchronous tasks, or reactive streams), the MDC context from the originating thread is not automatically propagated to the new thread.
> 
> When writing unit tests with Spring MVC's MockMvc, you might find that directly trying to access or assert MDC values set during the request processing can be challenging because MockMvc simulates the servlet environment. While your test code runs in one thread, the internal processing of the simulated request by Spring MVC, including the execution of your controller and any associated filters or interceptors, might involve different threads or thread pool usage. Consequently, the MDC context, being thread-local, is associated with the threads that handled the request, which are not necessarily the same as the main test execution thread where you are trying to inspect the MDC. This separation in thread context is why directly accessing the MDC from your test thread often yields empty or unexpected results.