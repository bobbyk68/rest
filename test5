import java.lang.reflect.Method;

@Test
void test_faultDetailString_successfulConversion() throws Exception {
    // Arrange
    SoapMessage mockSoapMessage = mock(SoapMessage.class);
    SoapBody mockSoapBody = mock(SoapBody.class);
    SoapFault mockSoapFault = mock(SoapFault.class);
    SoapFaultDetail mockFaultDetail = mock(SoapFaultDetail.class);
    SoapFaultDetailElement mockDetailElement = mock(SoapFaultDetailElement.class);
    Source mockSource = mock(Source.class);

    when(mockSoapMessage.getSoapBody()).thenReturn(mockSoapBody);
    when(mockSoapBody.getFault()).thenReturn(mockSoapFault);
    when(mockSoapFault.getFaultDetail()).thenReturn(mockFaultDetail);
    when(mockFaultDetail.getDetailEntries()).thenReturn(Collections.singletonList(mockDetailElement).iterator());
    when(mockDetailElement.getSource()).thenReturn(mockSource);

    SoapFaultHelper helper = Mockito.spy(new SoapFaultHelper(mockSoapMessage));

    // Use reflection to override private method
    Method method = SoapFaultHelper.class.getDeclaredMethod("convertSourceToString", Source.class);
    method.setAccessible(true);

    // Intercept call by temporarily subclassing behavior
    doAnswer(invocation -> "<fault>Something went wrong</fault>")
        .when(helper)
        .getClass()
        .getDeclaredMethod("convertSourceToString", Source.class)
        .invoke(helper, mockSource);

    // Fallback: just call method normally if mocking fails
    // Note: Above code may not work directly with Mockito â€” best path is to refactor to package-private

    // Act
    String actual = helper.faultDetailString();

    // Assert
    assertEquals("<fault>Something went wrong</fault>", actual);
}